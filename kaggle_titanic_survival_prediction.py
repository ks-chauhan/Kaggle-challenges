# -*- coding: utf-8 -*-
"""kaggle_titanic_survival_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o8wUMEE_xA0y3PLWx4ooQnYm2wF8WaQE
"""

import csv
import torch
from torch import nn
from tqdm.auto import tqdm

import pandas as pd

df=pd.read_csv("Titanic_Survival_Train.csv")

df.tail(2)

df[(df["Survived"]==1) & (df['Parch']==0)].shape[0]

features=["Pclass","Sex","Age","SibSp","Parch","Fare","Embarked"]
target="Survived"

df=df[features+[target]].dropna()

df['Sex']=df['Sex'].map({'male':0,'female':1})

df['Embarked']=df['Embarked'].map({'C':0,'Q':1,'S':2})

df["Age"] = df["Age"].apply(lambda age: 0 if age <= 12 else
                                       1 if age <= 19 else
                                       2 if age <= 59 else 3)

df.head()

X_Train_array=df[features].values
y_Train_array=df[target].values

X_Train=torch.tensor(X_Train_array,dtype=torch.float32)
y_Train=torch.tensor(y_Train_array,dtype=torch.float32)

X_Train[:4]

class TitanicSurvivalModelV0(nn.Module):
  def __init__(self,
               input_size:int,
               hidden_size:int,
               output_size:int):
    super().__init__()
    self.Layer1=nn.Sequential(
        nn.Linear(in_features=input_size,out_features=hidden_size),
        nn.ReLU(),
        nn.Linear(in_features=hidden_size,out_features=hidden_size),
        nn.ReLU(),
        nn.Linear(in_features=hidden_size,out_features=output_size)
    )
  def forward(self,X:torch.Tensor):
    X=self.Layer1(X)
    return X

model_0=TitanicSurvivalModelV0(input_size=7,hidden_size=14,output_size=1)

loss_fn=torch.nn.BCEWithLogitsLoss()
optimizer=torch.optim.Adam(params=model_0.parameters(),
                          lr=0.005)

pred=model_0(X_Train)
loss=loss_fn(pred.squeeze(),y_Train)
print(loss)

epochs=50000
for epoch in tqdm(range(epochs)):
  model_0.train()
  pred=model_0(X_Train)
  loss=loss_fn(pred.squeeze(),y_Train)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()
  if(epoch%400 == 0):
    print(f"current loss : {loss}")

y_Train.shape

